imports:
  - { resource: 'dependencies/**/*.yaml' }

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
framework:
  profiler: { collect: false, enabled: false }

parameters:
  locale: en_US
  raritan.database.name: '%env(RARITAN_DATABASE_NAME)%'
  raritan.database.user: '%env(RARITAN_DATABASE_USER)%'
  raritan.database.password: '%env(RARITAN_DATABASE_PASSWORD)%'
  raritan.database.host: '%env(RARITAN_DATABASE_HOST)%'
  raritan.database.port: '%env(RARITAN_DATABASE_PORT)%'

services:
  # Default configuration for services in *this* file
  _defaults:
    # Automatically injects dependencies in your services
    autowire: true

    # Automatically registers your services as commands, event subscribers, etc.
    autoconfigure: true

    # Allows optimizing the container by removing unused services; this also means
    # fetching services directly from the container via $container->get() won't work
    public: false

  _instanceof:
    Sylius\Bundle\ResourceBundle\Controller\ResourceController:
      autowire: false
    Sylius\Bundle\ResourceBundle\Form\Type\AbstractResourceType:
      autowire: false

  # Makes classes in src/ available to be used as services;
  # this creates a service per class whose id is the fully-qualified class name
  App\:
    resource: '../src/*'
    exclude: '../src/{Entity,Migrations,Repository,Tests,Kernel.php}'

  app.form.extension.product_translation:
    class: App\Form\Extension\ProductTranslationTypeExtension
    tags:
      - { name: form.type_extension, extended_type: Sylius\Bundle\ProductBundle\Form\Type\ProductTranslationType, priority: -1 }

  app.form.extension.taxonomy_translation:
    class: App\Form\Extension\TaxonTranslationTypeExtension
    tags:
      - { name: form.type_extension, extended_type: Sylius\Bundle\TaxonomyBundle\Form\Type\TaxonTranslationType, priority: -1 }

  solarix.shipping.provider.fedex:
    class: Solarix\Shipping\Provider\FedExProvider

  app.shipping_calculator.fedex:
    class: App\Shipping\Calculator\FedExRateCalculator
    arguments: [ '@solarix.shipping.provider.fedex' ]
    tags:
      - { name: sylius.shipping_calculator, calculator: fedex, label: "FedEx", form_type: App\Form\Type\FedExShippingCalculatorType }

  #  app.authorize_net_gateway_factory:
  #    class: Payum\Core\Bridge\Symfony\Builder\GatewayFactoryBuilder
  #    arguments: [ App\Payum\AuthorizeNetPaymentGatewayFactory ]
  #    tags:
  #      - { name: payum.gateway_factory_builder, factory: authorize_net }
  #
  #  app.authorize_net_gateway_configuration_type:
  #    class: App\Form\Type\AuthorizeNetGatewayConfigurationType
  #    tags:
  #      - { name: app.authorize_net_gateway_configuration_type, type: app.authorize_net_gateway_factory, label: 'Authorize.NET' }
  #      - { name: 'form.type' }
  #
  #  app.authorize_net_payum_action_capture_action:
  #    arguments: [ '@sylius.http_client' ]
  #    class: App\Payum\Action\CaptureAction
  #    public: true
  #    tags:
  #      - { name: 'payum.action', factory: '@app.authorize_net_gateway_factory', alias: 'payum.action.capture' }

  #  sylius.repository.product:
  #    class: App\Repository\ProductRepository
  #  App\Repository\ProductRepository: '@sylius.repository.product'

  # explicitly configure the service
  #  App\Command\Import\AbstractImportCommand:
  #    arguments:
  #      $name: null
  App\Command\Import\CategoryImportCommand:
    arguments:
      $name: null
  App\Command\Import\ProductImportCommand:
    arguments:
      $name: null
  App\Command\Import\ProductVariantImportCommand:
    arguments:
      $name: null
  App\Command\Import\SubcategoryImportCommand:
    arguments:
      $name: null
  Sylius\Bundle\TaxonomyBundle\Doctrine\ORM\TaxonRepository: '@sylius.repository.taxon'
  #      $importer: 'importer.subcategory'
  #  App\Command\ProductConvertCommand:
  #    arguments:
  #      $name: null
  #  App\Command\ProductImportCommand:
  #    arguments:
  #      $name: null
  #  App\Command\SubcategoryConvertCommand:
  #    arguments:
  #      $name: null

  # Controllers are imported separately to make sure services can be injected
  # as action arguments even if you don't extend any base controller class
  App\Controller\:
    resource: '../src/Controller'
    tags: [ 'controller.service_arguments' ]

web_profiler:
  toolbar: false
  intercept_redirects: false
