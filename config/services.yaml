imports:
  - { resource: 'dependencies/**/*.yaml' }
#  - { resource: "@BitBagSyliusCmsPlugin/Resources/config/services/sitemap_provider.yml" }

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
framework:
  profiler: { collect: false, enabled: false }

parameters:
  locale: en_US
  raritan.database.name: '%env(RARITAN_DATABASE_NAME)%'
  raritan.database.user: '%env(RARITAN_DATABASE_USER)%'
  raritan.database.password: '%env(RARITAN_DATABASE_PASSWORD)%'
  raritan.database.host: '%env(RARITAN_DATABASE_HOST)%'
  raritan.database.port: '%env(RARITAN_DATABASE_PORT)%'
  raritan.email.sales: '%env(string:RARITAN_EMAIL_SALES)%'
  raritan.email.support: '%env(string:RARITAN_EMAIL_SUPPORT)%'
  google_recaptcha_site_key: '%env(GOOGLE_RECAPTCHA_SITE_KEY)%'
  upload_directory: '%kernel.project_dir%/public/uploads'

services:
  # Default configuration for services in *this* file
  _defaults:
    # Automatically injects dependencies in your services
    autowire: true

    # Automatically registers your services as commands, event subscribers, etc.
    autoconfigure: true

    # Allows optimizing the container by removing unused services; this also means
    # fetching services directly from the container via $container->get() won't work
    public: false

  _instanceof:
    Sylius\Bundle\ResourceBundle\Controller\ResourceController:
      autowire: false
    Sylius\Bundle\ResourceBundle\Form\Type\AbstractResourceType:
      autowire: false

  # Makes classes in src/ available to be used as services;
  # this creates a service per class whose id is the fully-qualified class name
  App\:
    resource: '../src/*'
    exclude: '../src/{Entity,Migrations,Tests,Kernel.php}'

  App\Controller\ProductController:
    autowire: false

  app.email_manager.order_paid:
    class: App\EmailManager\OrderPaidEmailManager
    public: true
    arguments: [ '@sylius.email_sender', '@sylius.availability_checker', '@sylius.repository.admin_user' ]

  app.form.extension.complete:
    class: App\Form\Extension\CompleteTypeExtension
    tags:
      - { name: form.type_extension, extended_type: Sylius\Bundle\CoreBundle\Form\Type\Checkout\CompleteType, priority: -1 }

  app.form.extension.contact:
    class: App\Form\Extension\ContactTypeExtension
    tags:
      - { name: form.type_extension, extended_type: Sylius\Bundle\CoreBundle\Form\Type\ContactType, priority: -1 }

  app.form.extension.product_translation:
    class: App\Form\Extension\ProductTranslationTypeExtension
    tags:
      - { name: form.type_extension, extended_type: Sylius\Bundle\ProductBundle\Form\Type\ProductTranslationType, priority: -1 }

  app.form.extension.product:
    class: App\Form\Extension\ProductTypeExtension
    tags:
      - { name: form.type_extension, extended_type: Sylius\Bundle\ProductBundle\Form\Type\ProductType, priority: -1 }

  app.form.extension.taxon:
    class: App\Form\Extension\TaxonTypeExtension
    tags:
      - { name: form.type_extension, extended_type: Sylius\Bundle\TaxonomyBundle\Form\Type\TaxonType, priority: -1 }

  app.form.extension.taxonomy_translation:
    class: App\Form\Extension\TaxonTranslationTypeExtension
    tags:
      - { name: form.type_extension, extended_type: Sylius\Bundle\TaxonomyBundle\Form\Type\TaxonTranslationType, priority: -1 }

  app.admin.type.form.file:
    class: App\Form\Type\Admin\FileType
    tags:
      - { name: form.type, alias: app_admin_file_type }
    arguments: [ 'App\Entity\File\File' ]

  app.admin.type.form.product_file:
    class: App\Form\Type\Admin\Product\ProductFileType
    tags:
      - { name: form.type, alias: app_admin_product_file_type }
    arguments: [ 'App\Entity\Product\Product' ]

  app.listener.file:
    class: App\EventListener\FileListener
    arguments: [ '@app.repository.files' ]
    tags:
      - { name: kernel.event_listener, event: app.files.pre_create, method: onPreCreate, priority: 99 }
      - { name: kernel.event_listener, event: app.files.post_delete, method: onPostDelete, priority: 99 }

  app.listener.admin.file_upload:
    class: App\Service\Uploader\FileUploader
    autowire: true
    public: true
    tags:
      - { name: kernel.event_listener, event: app.files.pre_create, method: upload }
    arguments:
      $slugger: '@app.slugger'

  app.listener.admin.menu_builder:
    class: App\Menu\AdminMenuListener
    tags:
      - { name: kernel.event_listener, event: sylius.menu.admin.main, method: addAdminMenuItems }

  app.listener.admin.product.form.menu_builder:
    class: App\Menu\AdminProductFormMenuListener
    tags:
      - { name: kernel.event_listener, event: sylius.menu.admin.product.form, method: addItems }

  app.entity.listener.file_unique_constraint_listener:
    class: App\Entity\Listener\FileUniqueConstraintListener
    arguments: [ '@app.repository.files' ]

  app.slugger:
    class: Symfony\Component\String\Slugger\AsciiSlugger

  Symfony\Component\String\Slugger\SluggerInterface: '@app.slugger'

  app.generator.uploaded_file_path_generator:
    class: App\Service\Generator\UploadedFilePathGenerator
    autowire: false
    arguments: [ '@app.slugger' ]

  app.validator.unique.checksum:
    class: App\Validator\UniqueChecksumValidator
    arguments: [ '@app.repository.files' ]
    tags:
      - { name: validator.constraint_validator, alias: 'validator.unique.checksum' }

  app.shipping_calculator.fedex:
    class: App\Shipping\Calculator\FedExRateCalculator
    arguments: [ '@solarix.shipping.provider.fedex' ]
    tags:
      - { name: sylius.shipping_calculator, calculator: fedex, label: "FedEx", form_type: App\Form\Type\FedExShippingCalculatorType }

  app.provider.product_variants_codes:
    class: App\Provider\ProductVariantsCodesProvider

  app.templating.helper.product_variants_codes:
    class: App\Templating\Helper\ProductVariantsCodesHelper
    arguments: [ '@app.provider.product_variants_codes' ]
    tags:
      - { name: 'templating.helper', alias: 'app_product_variants_codes' }

  solarix.shipping.provider.fedex:
    class: Solarix\Shipping\Provider\FedExProvider

  sylius.controller.admin.file:
    class: App\Controller\Admin\FileController
    arguments: [ '@app.repository.files' ]
    public: true
    tags: [ 'controller.service_arguments' ]

  sylius.controller.admin.product_file:
    class: App\Controller\Admin\ProductFilesTabController
    arguments: [ '@templating' ]
    tags: [ 'controller.service_arguments' ]

  sylius.controller.shop.product:
    class: App\Controller\Shop\ProductController
    arguments: [ '@sylius.repository.product' ]
    public: true
    tags: [ 'controller.service_arguments' ]

  sylius.controller.shop.about:
    class: App\Controller\Shop\AboutController
    arguments: [ '@templating' ]
    tags: [ 'controller.service_arguments' ]

  sylius.controller.shop.contact:
    class: App\Controller\Shop\ContactController
    #    arguments: [ '@templating' ]
    tags: [ 'controller.service_arguments' ]

  sylius.controller.shop.dealer:
    class: App\Controller\Shop\DealerController
    arguments: [ '@templating' ]
    tags: [ 'controller.service_arguments' ]

  sylius.controller.shop.search:
    class: App\Controller\Shop\SearchController
    #    arguments: [ '@templating' ]
    tags: [ 'controller.service_arguments' ]

  App\Command\Import\CategoryImportCommand:
    arguments:
      $name: null
  App\Command\Import\DealerImportCommand:
    arguments:
      $name: null
  App\Command\Import\ProductImportCommand:
    arguments:
      $name: null
  App\Command\Import\ProductVariantImportCommand:
    arguments:
      $name: null
  App\Command\Import\SubcategoryImportCommand:
    arguments:
      $name: null
  App\Command\Import\ZoneImportCommand:
    arguments:
      $name: null
  Sylius\Bundle\TaxonomyBundle\Doctrine\ORM\TaxonRepository: '@sylius.repository.taxon'

  # Controllers are imported separately to make sure services can be injected
  # as action arguments even if you don't extend any base controller class
  App\Controller\:
    resource: '../src/Controller'
    tags: [ 'controller.service_arguments' ]
